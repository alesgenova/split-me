/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
/* tslint:disable */

import '@stencil/core';




declare global {
  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}

  namespace StencilComponents {

    interface SplitMe {
      'd': 'horizontal' | 'vertical';
      'fixed': boolean;
      'maxSizes': string;
      'minSizes': string;
      'n': number;
      'sizes': string;
      'throttle': number;
    }
  }


    interface HTMLSplitMeElement extends StencilComponents.SplitMe, HTMLStencilElement {}

    var HTMLSplitMeElement: {
      prototype: HTMLSplitMeElement;
      new (): HTMLSplitMeElement;
    };
    

  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {
    'split-me': JSXElements.SplitMeAttributes;
    }
  }

  namespace JSXElements {

    export interface SplitMeAttributes extends HTMLAttributes {
      'd'?: 'horizontal' | 'vertical';
      'fixed'?: boolean;
      'maxSizes'?: string;
      'minSizes'?: string;
      'n'?: number;
      'onSlotResized'?: (event: CustomEvent) => void;
      'sizes'?: string;
      'throttle'?: number;
    }
  }

  interface HTMLElementTagNameMap {
    'split-me': HTMLSplitMeElement
  }

  interface ElementTagNameMap {
    'split-me': HTMLSplitMeElement;
  }
}
declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;